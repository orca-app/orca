import os
import platform
from datetime import datetime
from argparse import ArgumentParser
import subprocess

# def bin_to_header(outputpath, prefix, files):
#     output = open(outputpath, "w")
#     output.write("/*********************************************************************\n")
#     output.write("*\n")
#     output.write("*\tfile: %s\n" % os.path.basename(outputpath))
#     output.write("*\tnote: string literals auto-generated by bin2header.py\n")
#     output.write("*\tdate: %s\n" % datetime.now().strftime("%d/%m%Y"))
#     output.write("*\n")
#     output.write("**********************************************************************/\n")

#     outSymbol = (os.path.splitext(os.path.basename(outputpath))[0]).upper()

#     output.write("#ifndef __%s_H__\n" % outSymbol)
#     output.write("#define __%s_H__\n" % outSymbol)
#     output.write("\n\n")

#     for fileName in files:
#         f = open(fileName, "rb")
#         data = f.read()

#         output.write("//NOTE: imported from %s\n" % fileName)

#         stringName = os.path.splitext(os.path.basename(fileName))[0]
#         output.write(f"const char* {prefix}{stringName} = ")

#         for byte in data:
#             output.write("\\x" + format(byte, "02x"))

#         output.write("\";\n\n")
#         f.close()

#     output.write("#endif // __%s_H__\n" % outSymbol)
#     output.close()

def embed_shaders(outputPath, prefix, commonPath, inputFiles):

    shaders = []

    common = ""
    if commonPath:
        with open(commonPath, "r") as f:
            common = f.read()

    for fileName in inputFiles:
        s = common
        with open(fileName, "r") as f:
            s += f.read()

        with open("tmp_shader.wgsl","w") as f:
            f.write(s)

        tint = "tint.exe" if platform.system() == "Windows" else "tint"

        subprocess.run([f"./build/dawn.out/bin/{tint}",
                        "tmp_shader.wgsl",
                        "-o", "tmp_shader.spv"], check=True)

        with open("tmp_shader.spv", "rb") as f:
            data = f.read()

        shaders.append((fileName, data))

    os.remove("tmp_shader.wgsl")
    os.remove("tmp_shader.spv")

    # write spirv shaders to header
    with open(outputPath, "w") as output:
        output.write("/*********************************************************************\n")
        output.write("*\n")
        output.write("*\tfile: %s\n" % os.path.basename(outputPath))
        output.write("*\tnote: string literals auto-generated by embed_shaders.py\n")
        output.write("*\tdate: %s\n" % datetime.now().strftime("%d/%m%Y"))
        output.write("*\n")
        output.write("**********************************************************************/\n")

        outSymbol = (os.path.splitext(os.path.basename(outputPath))[0]).upper()

        output.write("#ifndef __%s_H__\n" % outSymbol)
        output.write("#define __%s_H__\n" % outSymbol)
        output.write("\n\n")

        for fileName, data in shaders:

            output.write("//NOTE: imported from %s\n" % fileName)

            stringName = os.path.splitext(os.path.basename(fileName))[0]
            output.write(f"const u8 {prefix}{stringName}[] = {{")

            for byte in data:
                output.write("'\\x" + format(byte, "02x") + "', ")

            output.write("};\n\n")

            output.write(f"const u64 {prefix}{stringName}_len = " + str(len(data)) + ";\n\n")


        output.write("#endif // __%s_H__\n" % outSymbol)



if __name__ == "__main__":
	parser = ArgumentParser()
	parser.add_argument("inputFiles", nargs="+")
	parser.add_argument("--common")
	parser.add_argument("-o", "--output")
	parser.add_argument("-p", "--prefix")

	args = parser.parse_args()

	embed_shaders(args.output, args.prefix, args.common, args.inputFiles)
