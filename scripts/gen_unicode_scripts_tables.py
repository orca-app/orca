#!/usr/bin/env python3

import os
import re
import csv
from argparse import ArgumentParser

parser = ArgumentParser(prog='gen_unicode_scripts_tables.py')
parser.add_argument('--scripts', required=True)
parser.add_argument('--iso', required=True)
parser.add_argument('--out', required=True)

args = parser.parse_args()

with open(args.iso, "r") as f:
    reader = csv.reader(f, delimiter=';')
    iso = list(reader)

iso = [line for line in iso if len(line) > 0 and not line[0].startswith('#') ]

with open(args.scripts, "r") as f:
    data = f.read()

entries = re.findall(r'^([0-9A-Fa-f]{3,5})(\.\.([0-9A-Fa-f]{3,5}))?[ ]*; ([^ ]*) \#.*', data, re.MULTILINE)

table = []
script_to_tag = {}

for entry in entries:
    s = entry[0]
    e = entry[0] if entry[2] == '' else entry[2]
    name = entry[3]
    spaceName = name.replace('_', ' ')
    hyphenName = name.replace('_', '-')

    tag = ''
    for line in iso:
        if name == line[4] or name == line[2] or spaceName == line[4] or spaceName == line[2] or hyphenName == line[4] or hyphenName == line[2]:
            tag = line[0]

    if tag == '':
        print(f"Couldn't find iso15924 for unicode script {name}")
        exit(-1)

    table.append((int(s, 16), int(e, 16), name, tag))

    if name not in script_to_tag:
        script_to_tag[name] = tag

# sort the table by range start and collate ranges
table.sort()

newTable = []
currentStart = table[0][0]
currentName = table[0][2]
currentScript = table[0][3]

for line in table:
    if line[3] != currentScript:
        newTable.append((currentStart, line[0]-1, currentName, currentScript))
        currentStart = line[0]
        currentName = line[2]
        currentScript = line[3]

newTable.append((currentStart, table[len(table)-1][1], currentName, currentScript))

table = newTable

with open(args.out, "w") as f:
    inputName = os.path.basename(args.out)

    print("/*********************************************************************", file=f)
    print("*", file=f)
    print("*  Orca", file=f)
    print("*  Copyright 2023 Martin Fouilleul and the Orca project contributors", file=f)
    print("*  See LICENSE.txt for licensing information", file=f)
    print("*", file=f)
    print(f"*  Unicode script tables generated by gen_unicode_scripts_tables.py from {inputName}", file=f)
    print("*", file=f)
    print("**********************************************************************/", file=f)
    print("#ifndef __UNICODE_SCRIPTS_TABLE_H_", file=f)
    print("#define __UNICODE_SCRIPTS_TABLE_H_", file=f)
    print("", file=f)

    print("#include \"util/typedefs.h\"", file=f)
    print("#include \"util/macros.h\"", file=f)
    print("", file=f)

    print("#define OC_UNICODE_SCRIPTS(_) \\", file=f)
    for script, tag in script_to_tag.items():
        print(f"    _({script.upper()}, {tag}) \\", file=f)
    print("", file=f)

    print("typedef enum {", file=f)
    print("#define X(name, ...) OC_CAT2(OC_UNICODE_SCRIPT_, name),", file=f)
    print("    OC_UNICODE_SCRIPTS(X)", file=f)
    print("#undef X", file=f)
    print("} oc_unicode_script;", file=f)
    print("", file=f);

    print("typedef struct oc_unicode_script_range {", file=f)
    print("    u64 start;", file=f)
    print("    u64 end;", file=f)
    print("    oc_unicode_script script;", file=f)
    print("    oc_str8 tag;", file=f)
    print("} oc_unicode_script_range;", file=f)
    print("", file=f)

    print("static const oc_unicode_script_range OC_UNICODE_SCRIPT_RANGES[] = {", file=f)

    for line in table:
        print(f"    {{ {hex(line[0])}, {hex(line[1])}, OC_UNICODE_SCRIPT_{line[2].upper()}, OC_STR8_LIT(\"{line[3]}\") }},", file=f)

    print("};", file=f)

    print("", file=f)
    print("enum {", file=f)
    print(f"    OC_UNICODE_SCRIPT_RANGE_COUNT = {len(table)},", file=f)
    print("};", file=f)
    print("", file=f)

    print("#endif // __UNICODE_SCRIPTS_TABLE_H_", file=f)
